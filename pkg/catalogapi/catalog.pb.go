// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/catalogapi/catalog.proto

/*
Package catalogapi is a generated protocol buffer package.

It is generated from these files:
	pkg/catalogapi/catalog.proto

It has these top-level messages:
	PutRequest
	PutResponse
	SearchRequest
	SearchResponse
	PublicationReceipt
	Date
*/
package catalogapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PutRequest struct {
	Value *PublicationReceipt `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutRequest) GetValue() *PublicationReceipt {
	if m != nil {
		return m.Value
	}
	return nil
}

type PutResponse struct {
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// SearchRequest contains the parameters of the search. The entry and author/reader public key
// fields are equality filters, of which one or more must be set.
type SearchRequest struct {
	// 32-byte equality filter for the entry key
	EntryKey []byte `protobuf:"bytes,1,opt,name=entry_key,json=entryKey,proto3" json:"entry_key,omitempty"`
	// 33-byte equality filter for the (compressed) author public key
	AuthorPublicKey []byte `protobuf:"bytes,2,opt,name=author_public_key,json=authorPublicKey,proto3" json:"author_public_key,omitempty"`
	// 33-byte equality filter for the (compressed) reader public key
	ReaderPublicKey []byte `protobuf:"bytes,3,opt,name=reader_public_key,json=readerPublicKey,proto3" json:"reader_public_key,omitempty"`
	// microsecond epoch time exclusive filter to return only results received before a given
	// timestamp
	Before int64 `protobuf:"varint,4,opt,name=before" json:"before,omitempty"`
	// maximum number of results to return
	Limit uint32 `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchRequest) GetEntryKey() []byte {
	if m != nil {
		return m.EntryKey
	}
	return nil
}

func (m *SearchRequest) GetAuthorPublicKey() []byte {
	if m != nil {
		return m.AuthorPublicKey
	}
	return nil
}

func (m *SearchRequest) GetReaderPublicKey() []byte {
	if m != nil {
		return m.ReaderPublicKey
	}
	return nil
}

func (m *SearchRequest) GetBefore() int64 {
	if m != nil {
		return m.Before
	}
	return 0
}

func (m *SearchRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SearchResponse struct {
	Result []*PublicationReceipt `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SearchResponse) GetResult() []*PublicationReceipt {
	if m != nil {
		return m.Result
	}
	return nil
}

// Publication is a libri publication, intentionally defined separately to give us the flexibility
// down the road to add things to one and not the other.
type PublicationReceipt struct {
	EnvelopeKey     []byte `protobuf:"bytes,1,opt,name=envelope_key,json=envelopeKey,proto3" json:"envelope_key,omitempty"`
	EntryKey        []byte `protobuf:"bytes,2,opt,name=entry_key,json=entryKey,proto3" json:"entry_key,omitempty"`
	AuthorPublicKey []byte `protobuf:"bytes,3,opt,name=author_public_key,json=authorPublicKey,proto3" json:"author_public_key,omitempty"`
	ReaderPublicKey []byte `protobuf:"bytes,4,opt,name=reader_public_key,json=readerPublicKey,proto3" json:"reader_public_key,omitempty"`
	// received_time is epoch-time (microseconds since Jan 1, 1970) when the publication was
	// received.
	ReceivedTime int64 `protobuf:"varint,5,opt,name=received_time,json=receivedTime" json:"received_time,omitempty"`
}

func (m *PublicationReceipt) Reset()                    { *m = PublicationReceipt{} }
func (m *PublicationReceipt) String() string            { return proto.CompactTextString(m) }
func (*PublicationReceipt) ProtoMessage()               {}
func (*PublicationReceipt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PublicationReceipt) GetEnvelopeKey() []byte {
	if m != nil {
		return m.EnvelopeKey
	}
	return nil
}

func (m *PublicationReceipt) GetEntryKey() []byte {
	if m != nil {
		return m.EntryKey
	}
	return nil
}

func (m *PublicationReceipt) GetAuthorPublicKey() []byte {
	if m != nil {
		return m.AuthorPublicKey
	}
	return nil
}

func (m *PublicationReceipt) GetReaderPublicKey() []byte {
	if m != nil {
		return m.ReaderPublicKey
	}
	return nil
}

func (m *PublicationReceipt) GetReceivedTime() int64 {
	if m != nil {
		return m.ReceivedTime
	}
	return 0
}

// Date is a straightforward date.
type Date struct {
	Year  int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
}

func (m *Date) Reset()                    { *m = Date{} }
func (m *Date) String() string            { return proto.CompactTextString(m) }
func (*Date) ProtoMessage()               {}
func (*Date) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Date) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Date) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *Date) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func init() {
	proto.RegisterType((*PutRequest)(nil), "catalogapi.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "catalogapi.PutResponse")
	proto.RegisterType((*SearchRequest)(nil), "catalogapi.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "catalogapi.SearchResponse")
	proto.RegisterType((*PublicationReceipt)(nil), "catalogapi.PublicationReceipt")
	proto.RegisterType((*Date)(nil), "catalogapi.Date")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Catalog service

type CatalogClient interface {
	// Put adds a publication receipt to the catalog.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Search finds publication receipts matching certain filters.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type catalogClient struct {
	cc *grpc.ClientConn
}

func NewCatalogClient(cc *grpc.ClientConn) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/catalogapi.Catalog/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/catalogapi.Catalog/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Catalog service

type CatalogServer interface {
	// Put adds a publication receipt to the catalog.
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Search finds publication receipts matching certain filters.
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterCatalogServer(s *grpc.Server, srv CatalogServer) {
	s.RegisterService(&_Catalog_serviceDesc, srv)
}

func _Catalog_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalogapi.Catalog/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalogapi.Catalog/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Catalog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "catalogapi.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Catalog_Put_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Catalog_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/catalogapi/catalog.proto",
}

func init() { proto.RegisterFile("pkg/catalogapi/catalog.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0xae, 0xd2, 0x40,
	0x14, 0xc6, 0x1d, 0xfa, 0x47, 0x3d, 0x50, 0xff, 0x4c, 0x0c, 0x56, 0x34, 0xa6, 0xd6, 0x0d, 0x71,
	0x81, 0x09, 0x1a, 0xe3, 0x56, 0x74, 0x61, 0xe2, 0x86, 0x8c, 0xee, 0xc9, 0x50, 0x8e, 0x30, 0xa1,
	0xed, 0xd4, 0xe9, 0x94, 0xa4, 0x2f, 0xe0, 0x03, 0xdd, 0x37, 0xb9, 0x6f, 0x74, 0xd3, 0x99, 0x36,
	0xd0, 0xc0, 0x82, 0xbb, 0x3b, 0xe7, 0x7c, 0x5f, 0xce, 0x7c, 0xfc, 0x38, 0x85, 0x37, 0xc5, 0x7e,
	0xfb, 0x31, 0xe1, 0x9a, 0xa7, 0x72, 0xcb, 0x0b, 0xd1, 0x95, 0xb3, 0x42, 0x49, 0x2d, 0x29, 0x1c,
	0x95, 0x78, 0x01, 0xb0, 0xac, 0x34, 0xc3, 0x7f, 0x15, 0x96, 0x9a, 0x7e, 0x06, 0xef, 0xc0, 0xd3,
	0x0a, 0x43, 0x12, 0x91, 0xe9, 0x70, 0xfe, 0x76, 0x76, 0x74, 0xce, 0x96, 0xd5, 0x3a, 0x15, 0x09,
	0xd7, 0x42, 0xe6, 0x0c, 0x13, 0x14, 0x85, 0x66, 0xd6, 0x1c, 0x07, 0x30, 0x34, 0x3b, 0xca, 0x42,
	0xe6, 0x25, 0xc6, 0x37, 0x04, 0x82, 0xdf, 0xc8, 0x55, 0xb2, 0xeb, 0xd6, 0xbe, 0x86, 0xc7, 0x98,
	0x6b, 0x55, 0xaf, 0xf6, 0x58, 0x9b, 0xd5, 0x23, 0xf6, 0xc8, 0x0c, 0x7e, 0x61, 0x4d, 0x3f, 0xc0,
	0x73, 0x5e, 0xe9, 0x9d, 0x54, 0xab, 0xc2, 0xbc, 0x60, 0x4c, 0x03, 0x63, 0x7a, 0x6a, 0x05, 0xfb,
	0x72, 0xeb, 0x55, 0xc8, 0x37, 0xd8, 0xf3, 0x3a, 0xd6, 0x6b, 0x85, 0xa3, 0x77, 0x0c, 0xfe, 0x1a,
	0xff, 0x4a, 0x85, 0xa1, 0x1b, 0x91, 0xa9, 0xc3, 0xda, 0x8e, 0xbe, 0x00, 0x2f, 0x15, 0x99, 0xd0,
	0xa1, 0x17, 0x91, 0x69, 0xc0, 0x6c, 0x13, 0xff, 0x84, 0x27, 0x5d, 0x66, 0xfb, 0x33, 0xe8, 0x17,
	0xf0, 0x15, 0x96, 0x55, 0xaa, 0x43, 0x12, 0x39, 0x57, 0xc0, 0x68, 0xdd, 0xf1, 0x2d, 0x01, 0x7a,
	0x2e, 0xd3, 0x77, 0x30, 0xc2, 0xfc, 0x80, 0xa9, 0x2c, 0xf0, 0x04, 0xc3, 0xb0, 0x9b, 0x35, 0x89,
	0x7b, 0x98, 0x06, 0xd7, 0x60, 0x72, 0xee, 0x81, 0xc9, 0xbd, 0x8c, 0xe9, 0x3d, 0x04, 0xaa, 0x89,
	0x78, 0xc0, 0xcd, 0x4a, 0x8b, 0x0c, 0x0d, 0x16, 0x87, 0x8d, 0xba, 0xe1, 0x1f, 0x91, 0x61, 0xbc,
	0x00, 0xf7, 0x07, 0xd7, 0x48, 0x29, 0xb8, 0x35, 0x72, 0x65, 0xc2, 0x7b, 0xcc, 0xd4, 0x0d, 0xcf,
	0x4c, 0xe6, 0x7a, 0x67, 0x12, 0x7b, 0xcc, 0x36, 0xf4, 0x19, 0x38, 0x1b, 0x6e, 0x03, 0x7a, 0xac,
	0x29, 0xe7, 0xff, 0x09, 0x3c, 0xfc, 0x6e, 0x09, 0xd2, 0xaf, 0xe0, 0x2c, 0x2b, 0x4d, 0xc7, 0x7d,
	0xa4, 0xdd, 0x19, 0x4e, 0x5e, 0x9e, 0xcd, 0xdb, 0xd3, 0x7a, 0x40, 0xbf, 0x81, 0x6f, 0xff, 0x27,
	0xfa, 0xea, 0xd4, 0xd4, 0xbb, 0xb7, 0xc9, 0xe4, 0x92, 0xd4, 0xad, 0x58, 0xfb, 0xe6, 0x2b, 0xf8,
	0x74, 0x17, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xdc, 0x42, 0x22, 0x25, 0x03, 0x00, 0x00,
}
