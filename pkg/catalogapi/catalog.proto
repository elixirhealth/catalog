syntax = "proto3";

package catalogapi;

service Catalog {

    // Put adds a publication receipt to the catalog.
    rpc Put (PutRequest) returns (PutResponse) {}

    // Search finds publication receipts matching certain filters.
    rpc Search (SearchRequest) returns (SearchResponse) {}
}

message PutRequest {
    PublicationReceipt value = 1;
}

message PutResponse {
}

// SearchRequest contains the parameters of the search. The entry and author/reader public key
// fields are equality filters, of which one or more must be set.
message SearchRequest {

    // 32-byte equality filter for the entry key
    bytes entry_key = 1;

    // 33-byte equality filter for the (compressed) author public key
    bytes author_public_key = 2;

    // equality filter for the author entity ID
    string author_entity_id = 3;

    // 33-byte equality filter for the (compressed) reader public key
    bytes reader_public_key = 4;

    // equality filter for the reader entity ID
    string reader_entity_id = 5;

    // microsecond epoch time exclusive filter to return only results received before a given
    // timestamp
    int64 before = 6;

    // microsecond epoch time inclusive filter to return only results received after a given
    // timestamp
    int64 after = 7;

    // maximum number of results to return
    uint32 limit = 8;
}

message SearchResponse {
    repeated PublicationReceipt result = 1;
}

// Publication is a libri publication, intentionally defined separately to give us the flexibility
// down the road to add things to one and not the other.
message PublicationReceipt {
    bytes envelope_key = 1;
    bytes entry_key = 2;
    bytes author_public_key = 3;
    string author_entity_id = 4;
    bytes reader_public_key = 5;
    string reader_entity_id = 6;

    // received_time is epoch-time (microseconds since Jan 1, 1970) when the publication was
    // received.
    int64 received_time = 7;
}

// Date is a straightforward date.
message Date {
    int32 year = 1;
    int32 month = 2;
    int32 day = 3;
}