// Code generated by go-bindata.
// sources:
// sql/001_add-initial-tables.down.sql
// sql/001_add-initial-tables.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_addInitialTablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\x4e\x2c\xc9\xcc\xcf\xd3\x2b\x4a\x4d\x4e\xcd\x2c\x28\x51\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\x02\xab\x0b\x76\xf6\x70\xf5\x75\x44\x56\x68\xcd\x05\x08\x00\x00\xff\xff\x45\x45\xab\x86\x41\x00\x00\x00")

func _001_addInitialTablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTablesDownSql,
		"001_add-initial-tables.down.sql",
	)
}

func _001_addInitialTablesDownSql() (*asset, error) {
	bytes, err := _001_addInitialTablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-tables.down.sql", size: 65, mode: os.FileMode(420), modTime: time.Unix(1522608697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_addInitialTablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xd1\x6e\xb2\x30\x18\x86\xcf\xb9\x8a\xef\x50\x92\xdf\xff\x06\x3c\xaa\xda\x4d\x32\xa8\x0e\xcb\x36\x77\x42\x3a\xf8\x8c\xcd\xba\xb6\x29\xd5\x85\xbb\x5f\x08\x4e\xd9\x90\x71\xda\x3e\xef\x93\xf6\x7d\x17\x29\x25\x9c\xc2\x76\xb1\xa2\x09\x01\x7b\x7c\x53\xb2\x10\x5e\x1a\x3d\x0b\x82\xe9\x14\x84\xb5\xa8\xcb\xa9\xd1\xaa\x0e\xce\x28\x27\xf3\x98\x76\xc9\xff\x0e\x0b\x94\xd6\xc3\x24\x00\x70\xe6\x33\x97\x25\x6c\x69\x1a\x91\x18\x36\x69\x94\x90\x74\x07\x0f\x74\xf7\x2f\x00\xf0\x4e\xe8\x4a\x14\x4d\x28\xf7\xf2\x03\x81\x47\x09\xdd\x72\x92\x6c\xf8\x2b\xb0\x35\x07\x96\xc5\x31\x2c\xe9\x1d\xc9\x62\x0e\x6c\xfd\x3c\x09\x9b\x18\xea\x13\x2a\x63\x31\x7f\xc7\x1a\xe6\x3b\x4e\x09\x64\x2c\x7a\xcc\xe8\x25\xd3\x52\xde\xd5\x1d\xa4\x7b\x27\x8e\xfe\x60\x5c\xde\x3e\xfa\x6f\x06\xb5\x97\xbe\x6e\xfe\xf0\x44\xd2\xc5\x8a\xa4\xcd\x9d\x43\x51\xe2\x48\xfe\xcc\x0c\xe4\x0b\x94\x27\x2c\xdb\x5f\xcf\xa3\xfb\x88\xf1\x1f\xe7\xa5\xf0\x08\x4b\xc2\x69\x10\xb6\xc5\x57\x47\x6b\x8d\xf3\xb0\x97\xca\xa3\xab\xc0\x68\x10\x4a\x81\xd9\x83\x3f\x60\x85\xb0\x97\xa8\xca\xea\x7b\x93\x88\x2d\xe9\x0b\x9c\x77\xc8\xaf\x4d\xac\xd9\xed\xa1\x2e\x44\x38\xbb\xad\xe8\x17\x36\xa4\xea\x91\x23\xca\x6b\x3f\x23\xc6\x0b\x38\x24\xec\x8f\x32\x64\xec\x91\x23\xca\xf1\x37\xfe\x06\x87\x85\xdd\x81\x87\x6d\x1d\x2a\x9c\x05\x5f\x01\x00\x00\xff\xff\xe1\x5f\x79\x63\x95\x03\x00\x00")

func _001_addInitialTablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTablesUpSql,
		"001_add-initial-tables.up.sql",
	)
}

func _001_addInitialTablesUpSql() (*asset, error) {
	bytes, err := _001_addInitialTablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-tables.up.sql", size: 917, mode: os.FileMode(420), modTime: time.Unix(1522707628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_add-initial-tables.down.sql": _001_addInitialTablesDownSql,
	"001_add-initial-tables.up.sql":   _001_addInitialTablesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_add-initial-tables.down.sql": &bintree{_001_addInitialTablesDownSql, map[string]*bintree{}},
	"001_add-initial-tables.up.sql":   &bintree{_001_addInitialTablesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
